> /home/ibrkanac/.local/pipx/venvs/keymap-drawer/lib/python3.10/site-packages/keymap_drawer/draw/draw.py(165)print_board()
-> if draw_layers:
(Pdb) (Pdb) 155  	    def print_board(
156  	        self,
157  	        draw_layers: Sequence[str] | None = None,
158  	        keys_only: bool = False,
159  	        combos_only: bool = False,
160  	        ghost_keys: Sequence[int] | None = None,
161  	    ) -> None:
162  	        """Print SVG code representing the keymap."""
163  	        layers = deepcopy(self.keymap.layers)
164  	        breakpoint()
165  ->	        if draw_layers:
166  	            assert all(l in layers for l in draw_layers), "Some layer names selected for drawing are not in the keymap"
167  	            layers = {name: layer for name, layer in layers.items() if name in draw_layers}
168  	
169  	        if keys_only:
170  	            combos_per_layer: dict[str, list[ComboSpec]] = {}
171  	        else:
172  	            combos_per_layer = self.keymap.get_combos_per_layer(layers)
173  	
174  	        if combos_only:
175  	            layers = {
176  	                name: [LayoutKey() for _ in range(len(self.layout))]
177  	                for name, combos in combos_per_layer.items()
178  	                if combos
179  	            }
180  	
181  	        if ghost_keys:
182  	            for key_position in ghost_keys:
183  	                assert (
184  	                    0 <= key_position < len(self.layout)
185  	                ), "Some key positions for `ghost_keys` are negative or too large for the layout"
186  	                for layer in layers.values():
187  	                    layer[key_position].type = "ghost"
188  	
189  	        # write to internal output stream self.out
190  	        p = self.print_layers(Point(0, 0), self.layout, layers, combos_per_layer, self.cfg.n_columns)
191  	
192  	        if not keys_only:
193  	            layout, combo_layers = self.create_combo_diagrams(self.cfg.combo_diagrams_scale, ghost_keys)
194  	            if layout is not None and combo_layers:
195  	                self.print_layer_header(Point(self.cfg.outer_pad_w, p.y + self.cfg.outer_pad_h / 2), "Combos")
196  	                p = self.print_layers(
197  	                    Point(0, p.y),
198  	                    layout,
199  	                    combo_layers,
200  	                    combos_per_layer,
201  	                    self.cfg.n_columns * self.cfg.combo_diagrams_scale,
202  	                    draw_header=False,
203  	                    pad_divisor=self.cfg.combo_diagrams_scale,
204  	                )
205  	
206  	        # write to final output stream self.output_stream
207  	        board_w, board_h = round(p.x), round(p.y + self.cfg.outer_pad_h)
208  	        self.output_stream.write(
209  	            f'<svg width="{board_w}" height="{board_h}" viewBox="0 0 {board_w} {board_h}" class="keymap" '
210  	            'xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n'
211  	        )
212  	        self.output_stream.write(self.get_glyph_defs())
213  	        extra_style = f"\n{self.cfg.svg_extra_style}" if self.cfg.svg_extra_style else ""
214  	        self.output_stream.write(f"<style>{self.cfg.svg_style}{extra_style}</style>\n")
215  	        self.output_stream.write(self.out.getvalue())
216  	        self.output_stream.write("</svg>\n")
(Pdb) 155  	    def print_board(
156  	        self,
157  	        draw_layers: Sequence[str] | None = None,
158  	        keys_only: bool = False,
159  	        combos_only: bool = False,
160  	        ghost_keys: Sequence[int] | None = None,
161  	    ) -> None:
162  	        """Print SVG code representing the keymap."""
163  	        layers = deepcopy(self.keymap.layers)
164  	        breakpoint()
165  ->	        if draw_layers:
166  	            assert all(l in layers for l in draw_layers), "Some layer names selected for drawing are not in the keymap"
167  	            layers = {name: layer for name, layer in layers.items() if name in draw_layers}
168  	
169  	        if keys_only:
170  	            combos_per_layer: dict[str, list[ComboSpec]] = {}
171  	        else:
172  	            combos_per_layer = self.keymap.get_combos_per_layer(layers)
173  	
174  	        if combos_only:
175  	            layers = {
176  	                name: [LayoutKey() for _ in range(len(self.layout))]
177  	                for name, combos in combos_per_layer.items()
178  	                if combos
179  	            }
180  	
181  	        if ghost_keys:
182  	            for key_position in ghost_keys:
183  	                assert (
184  	                    0 <= key_position < len(self.layout)
185  	                ), "Some key positions for `ghost_keys` are negative or too large for the layout"
186  	                for layer in layers.values():
187  	                    layer[key_position].type = "ghost"
188  	
189  	        # write to internal output stream self.out
190  	        p = self.print_layers(Point(0, 0), self.layout, layers, combos_per_layer, self.cfg.n_columns)
191  	
192  	        if not keys_only:
193  	            layout, combo_layers = self.create_combo_diagrams(self.cfg.combo_diagrams_scale, ghost_keys)
194  	            if layout is not None and combo_layers:
195  	                self.print_layer_header(Point(self.cfg.outer_pad_w, p.y + self.cfg.outer_pad_h / 2), "Combos")
196  	                p = self.print_layers(
197  	                    Point(0, p.y),
198  	                    layout,
199  	                    combo_layers,
200  	                    combos_per_layer,
201  	                    self.cfg.n_columns * self.cfg.combo_diagrams_scale,
202  	                    draw_header=False,
203  	                    pad_divisor=self.cfg.combo_diagrams_scale,
204  	                )
205  	
206  	        # write to final output stream self.output_stream
207  	        board_w, board_h = round(p.x), round(p.y + self.cfg.outer_pad_h)
208  	        self.output_stream.write(
209  	            f'<svg width="{board_w}" height="{board_h}" viewBox="0 0 {board_w} {board_h}" class="keymap" '
210  	            'xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n'
211  	        )
212  	        self.output_stream.write(self.get_glyph_defs())
213  	        extra_style = f"\n{self.cfg.svg_extra_style}" if self.cfg.svg_extra_style else ""
214  	        self.output_stream.write(f"<style>{self.cfg.svg_style}{extra_style}</style>\n")
215  	        self.output_stream.write(self.out.getvalue())
216  	        self.output_stream.write("</svg>\n")
(Pdb) 